{"mappings":"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","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\nvar board;\nvar score = 0;\nvar rows = 4;\nvar columns = 4;\nvar isGameStarted = false;\ndocument.addEventListener(\"DOMContentLoaded\", function() {\n    board = Array.from({\n        length: rows\n    }, function() {\n        return Array(columns).fill(0);\n    });\n    renderBoard();\n    var startButton = document.querySelector(\".start\");\n    startButton.addEventListener(\"click\", startGame);\n    var restartButton = document.querySelector(\".restart\");\n    restartButton.addEventListener(\"click\", restartGame);\n});\nfunction startGame() {\n    isGameStarted = true;\n    document.querySelector(\".message-start\").classList.add(\"hidden\");\n    document.querySelector(\".start\").classList.add(\"hidden\");\n    document.querySelector(\".restart\").classList.remove(\"hidden\");\n    addRandomTile();\n    addRandomTile();\n}\nfunction restartGame() {\n    board = Array.from({\n        length: rows\n    }, function() {\n        return Array(columns).fill(0);\n    });\n    score = 0;\n    isGameStarted = false;\n    renderBoard();\n    document.querySelector(\".game-score\").innerText = score;\n    document.querySelector(\".restart\").classList.add(\"hidden\");\n    document.querySelector(\".message-lose\").classList.add(\"hidden\");\n    document.querySelector(\".message-win\").classList.add(\"hidden\");\n    document.querySelector(\".start\").classList.remove(\"hidden\");\n    document.querySelector(\".message-start\").classList.remove(\"hidden\");\n}\nfunction winGame() {\n    document.querySelector(\".message-win\").classList.remove(\"hidden\");\n    isGameStarted = false;\n}\nfunction loseGame() {\n    document.querySelector(\".message-lose\").classList.remove(\"hidden\");\n    isGameStarted = false;\n}\nfunction isNoMovesLeft() {\n    if (hasEmptyTile()) return false;\n    for(var r = 0; r < rows; r++)for(var c = 0; c < columns; c++){\n        var current = board[r][c];\n        if (r > 0 && board[r - 1][c] === current) return false;\n        if (r < rows - 1 && board[r + 1][c] === current) return false;\n        if (c > 0 && board[r][c - 1] === current) return false;\n        if (c < columns - 1 && board[r][c + 1] === current) return false;\n    }\n    return true;\n}\nfunction renderBoard() {\n    var gameField = document.getElementById(\"board\");\n    gameField.innerHTML = \"\";\n    for(var r = 0; r < rows; r++)for(var c = 0; c < columns; c++){\n        var tile = document.createElement(\"div\");\n        tile.id = \"\".concat(r, \"-\").concat(c);\n        updateTile(tile, board[r][c]);\n        gameField.append(tile);\n    }\n}\nfunction hasEmptyTile() {\n    return board.some(function(row) {\n        return row.includes(0);\n    });\n}\nfunction addRandomTile() {\n    if (!hasEmptyTile()) return;\n    var found = false;\n    while(!found){\n        var r = Math.floor(Math.random() * rows);\n        var c = Math.floor(Math.random() * columns);\n        if (board[r][c] === 0) {\n            var newValue = Math.random() < 0.6 ? 2 : 4;\n            board[r][c] = newValue;\n            var tile = document.getElementById(\"\".concat(r, \"-\").concat(c));\n            updateTile(tile, newValue, true);\n            found = true;\n        }\n    }\n}\nfunction updateTile(tile, num) {\n    var animate = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : false;\n    tile.innerText = num > 0 ? num : \"\";\n    tile.className = \"field-cell\".concat(num > 0 && num <= 2048 ? \" field-cell--\".concat(num) : \"\");\n    if (animate) {\n        tile.style.transform = \"scale(0.5)\";\n        setTimeout(function() {\n            tile.style.transform = \"scale(1)\";\n        }, 50);\n    }\n}\ndocument.addEventListener(\"keyup\", function(e) {\n    var originalBoard = JSON.stringify(board);\n    if (!isGameStarted) return;\n    var moves = {\n        ArrowLeft: slideLeft,\n        ArrowRight: slideRight,\n        ArrowUp: slideUp,\n        ArrowDown: slideDown\n    };\n    if (moves[e.code]) {\n        moves[e.code]();\n        if (originalBoard !== JSON.stringify(board)) addRandomTile();\n    }\n    document.querySelector(\".game-score\").innerText = score;\n});\n/* eslint-disable no-param-reassign */ function filterZero(row) {\n    return row.filter(function(num) {\n        return num !== 0;\n    });\n}\nfunction slide(row) {\n    row = filterZero(row);\n    for(var i = 0; i < row.length - 1; i++)if (row[i] === row[i + 1]) {\n        row[i] *= 2;\n        row[i + 1] = 0;\n        score += row[i];\n    }\n    row = filterZero(row);\n    while(row.length < columns)row.push(0);\n    return row;\n}\nfunction slideLeft() {\n    for(var r = 0; r < rows; r++)board[r] = slide(board[r]);\n    updateBoard();\n}\nfunction slideRight() {\n    for(var r = 0; r < rows; r++)board[r] = slide(board[r].reverse()).reverse();\n    updateBoard();\n}\nfunction slideUp() {\n    var _loop = function(c) {\n        var column = board.map(function(row) {\n            return row[c];\n        });\n        var newColumn = slide(column);\n        for(var r = 0; r < rows; r++)board[r][c] = newColumn[r];\n    };\n    for(var c = 0; c < columns; c++)_loop(c);\n    updateBoard();\n}\nfunction slideDown() {\n    var _loop = function(c) {\n        var column = board.map(function(row) {\n            return row[c];\n        }).reverse();\n        var newColumn = slide(column).reverse();\n        for(var r = 0; r < rows; r++)board[r][c] = newColumn[r];\n    };\n    for(var c = 0; c < columns; c++)_loop(c);\n    updateBoard();\n}\nfunction updateBoard() {\n    for(var r = 0; r < rows; r++){\n        for(var c = 0; c < columns; c++){\n            var tile = document.getElementById(\"\".concat(r, \"-\").concat(c));\n            updateTile(tile, board[r][c]);\n        }\n        if (board[r].includes(2048)) {\n            winGame();\n            return;\n        }\n        if (isNoMovesLeft()) loseGame();\n    }\n}\n\n//# sourceMappingURL=index.d9e77f92.js.map\n","'use strict';\n\nlet board;\nlet score = 0;\nconst rows = 4;\nconst columns = 4;\nlet isGameStarted = false;\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  board = Array.from({ length: rows }, () => Array(columns).fill(0));\n  renderBoard();\n\n  const startButton = document.querySelector('.start');\n\n  startButton.addEventListener('click', startGame);\n\n  const restartButton = document.querySelector('.restart');\n\n  restartButton.addEventListener('click', restartGame);\n});\n\nfunction startGame() {\n  isGameStarted = true;\n\n  document.querySelector('.message-start').classList.add('hidden');\n  document.querySelector('.start').classList.add('hidden');\n  document.querySelector('.restart').classList.remove('hidden');\n\n  addRandomTile();\n  addRandomTile();\n}\n\nfunction restartGame() {\n  board = Array.from({ length: rows }, () => Array(columns).fill(0));\n  score = 0;\n  isGameStarted = false;\n  renderBoard();\n\n  document.querySelector('.game-score').innerText = score;\n\n  document.querySelector('.restart').classList.add('hidden');\n  document.querySelector('.message-lose').classList.add('hidden');\n  document.querySelector('.message-win').classList.add('hidden');\n  document.querySelector('.start').classList.remove('hidden');\n  document.querySelector('.message-start').classList.remove('hidden');\n}\n\nfunction winGame() {\n  document.querySelector('.message-win').classList.remove('hidden');\n  isGameStarted = false;\n}\n\nfunction loseGame() {\n  document.querySelector('.message-lose').classList.remove('hidden');\n  isGameStarted = false;\n}\n\nfunction isNoMovesLeft() {\n  if (hasEmptyTile()) {\n    return false;\n  }\n\n  for (let r = 0; r < rows; r++) {\n    for (let c = 0; c < columns; c++) {\n      const current = board[r][c];\n\n      if (r > 0 && board[r - 1][c] === current) {\n        return false;\n      }\n\n      if (r < rows - 1 && board[r + 1][c] === current) {\n        return false;\n      }\n\n      if (c > 0 && board[r][c - 1] === current) {\n        return false;\n      }\n\n      if (c < columns - 1 && board[r][c + 1] === current) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n\nfunction renderBoard() {\n  const gameField = document.getElementById('board');\n\n  gameField.innerHTML = '';\n\n  for (let r = 0; r < rows; r++) {\n    for (let c = 0; c < columns; c++) {\n      const tile = document.createElement('div');\n\n      tile.id = `${r}-${c}`;\n      updateTile(tile, board[r][c]);\n      gameField.append(tile);\n    }\n  }\n}\n\nfunction hasEmptyTile() {\n  return board.some(row => row.includes(0));\n}\n\nfunction addRandomTile() {\n  if (!hasEmptyTile()) {\n    return;\n  }\n\n  let found = false;\n\n  while (!found) {\n    const r = Math.floor(Math.random() * rows);\n    const c = Math.floor(Math.random() * columns);\n\n    if (board[r][c] === 0) {\n      const newValue = Math.random() < 0.6 ? 2 : 4;\n\n      board[r][c] = newValue;\n\n      const tile = document.getElementById(`${r}-${c}`);\n\n      updateTile(tile, newValue, true);\n      found = true;\n    }\n  }\n}\n\nfunction updateTile(tile, num, animate = false) {\n  tile.innerText = num > 0 ? num : '';\n\n  tile.className = `field-cell${num > 0 && num <= 2048\n    ? ` field-cell--${num}`\n    : ''\n  }`;\n\n  if (animate) {\n    tile.style.transform = 'scale(0.5)';\n\n    setTimeout(() => {\n      tile.style.transform = 'scale(1)';\n    }, 50);\n  }\n}\n\ndocument.addEventListener('keyup', (e) => {\n  const originalBoard = JSON.stringify(board);\n\n  if (!isGameStarted) {\n    return;\n  }\n\n  const moves = {\n    ArrowLeft: slideLeft,\n    ArrowRight: slideRight,\n    ArrowUp: slideUp,\n    ArrowDown: slideDown,\n  };\n\n  if (moves[e.code]) {\n    moves[e.code]();\n\n    if (originalBoard !== JSON.stringify(board)) {\n      addRandomTile();\n    }\n  }\n\n  document.querySelector('.game-score').innerText = score;\n});\n\n/* eslint-disable no-param-reassign */\nfunction filterZero(row) {\n  return row.filter(num => num !== 0);\n}\n\nfunction slide(row) {\n  row = filterZero(row);\n\n  for (let i = 0; i < row.length - 1; i++) {\n    if (row[i] === row[i + 1]) {\n      row[i] *= 2;\n      row[i + 1] = 0;\n      score += row[i];\n    }\n  }\n\n  row = filterZero(row);\n\n  while (row.length < columns) {\n    row.push(0);\n  }\n\n  return row;\n}\n\nfunction slideLeft() {\n  for (let r = 0; r < rows; r++) {\n    board[r] = slide(board[r]);\n  }\n  updateBoard();\n}\n\nfunction slideRight() {\n  for (let r = 0; r < rows; r++) {\n    board[r] = slide(board[r].reverse()).reverse();\n  }\n  updateBoard();\n}\n\nfunction slideUp() {\n  for (let c = 0; c < columns; c++) {\n    const column = board.map(row => row[c]);\n    const newColumn = slide(column);\n\n    for (let r = 0; r < rows; r++) {\n      board[r][c] = newColumn[r];\n    }\n  }\n  updateBoard();\n}\n\nfunction slideDown() {\n  for (let c = 0; c < columns; c++) {\n    const column = board.map(row => row[c]).reverse();\n    const newColumn = slide(column).reverse();\n\n    for (let r = 0; r < rows; r++) {\n      board[r][c] = newColumn[r];\n    }\n  }\n  updateBoard();\n}\n\nfunction updateBoard() {\n  for (let r = 0; r < rows; r++) {\n    for (let c = 0; c < columns; c++) {\n      const tile = document.getElementById(`${r}-${c}`);\n\n      updateTile(tile, board[r][c]);\n    }\n\n    if (board[r].includes(2048)) {\n      winGame();\n\n      return;\n    };\n\n    if (isNoMovesLeft()) {\n      loseGame();\n    }\n  }\n}\n"],"names":["board","score","isGameStarted","startGame","document","querySelector","classList","add","remove","addRandomTile","restartGame","Array","from","length","fill","renderBoard","innerText","gameField","getElementById","innerHTML","r","c","tile","createElement","id","concat","updateTile","append","hasEmptyTile","some","row","includes","found","Math","floor","random","newValue","num","animate","arguments","className","style","transform","setTimeout","filterZero","filter","slide","i","push","slideLeft","updateBoard","slideRight","reverse","slideUp","_loop","newColumn","map","slideDown","isNoMovesLeft","current","rows","columns","addEventListener","startButton","restartButton","e","originalBoard","JSON","stringify","moves","ArrowLeft","ArrowRight","ArrowUp","ArrowDown","code"],"version":3,"file":"index.d9e77f92.js.map"}